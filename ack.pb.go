// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ackpb/ack.proto

package ackpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AckReq struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckReq) Reset()         { *m = AckReq{} }
func (m *AckReq) String() string { return proto.CompactTextString(m) }
func (*AckReq) ProtoMessage()    {}
func (*AckReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a216931330a624c, []int{0}
}

func (m *AckReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckReq.Unmarshal(m, b)
}
func (m *AckReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckReq.Marshal(b, m, deterministic)
}
func (m *AckReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckReq.Merge(m, src)
}
func (m *AckReq) XXX_Size() int {
	return xxx_messageInfo_AckReq.Size(m)
}
func (m *AckReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AckReq.DiscardUnknown(m)
}

var xxx_messageInfo_AckReq proto.InternalMessageInfo

func (m *AckReq) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type AckRes struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckRes) Reset()         { *m = AckRes{} }
func (m *AckRes) String() string { return proto.CompactTextString(m) }
func (*AckRes) ProtoMessage()    {}
func (*AckRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a216931330a624c, []int{1}
}

func (m *AckRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckRes.Unmarshal(m, b)
}
func (m *AckRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckRes.Marshal(b, m, deterministic)
}
func (m *AckRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckRes.Merge(m, src)
}
func (m *AckRes) XXX_Size() int {
	return xxx_messageInfo_AckRes.Size(m)
}
func (m *AckRes) XXX_DiscardUnknown() {
	xxx_messageInfo_AckRes.DiscardUnknown(m)
}

var xxx_messageInfo_AckRes proto.InternalMessageInfo

func (m *AckRes) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*AckReq)(nil), "ack.AckReq")
	proto.RegisterType((*AckRes)(nil), "ack.AckRes")
}

func init() { proto.RegisterFile("ackpb/ack.proto", fileDescriptor_1a216931330a624c) }

var fileDescriptor_1a216931330a624c = []byte{
	// 126 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4c, 0xce, 0x2e,
	0x48, 0xd2, 0x4f, 0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4e, 0x4c, 0xce,
	0x56, 0x92, 0xe2, 0x62, 0x73, 0x4c, 0xce, 0x0e, 0x4a, 0x2d, 0x14, 0x12, 0xe0, 0x62, 0xce, 0x2d,
	0x4e, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0x31, 0xe1, 0x72, 0xc5, 0x98, 0x72, 0x46,
	0xc6, 0x5c, 0x5c, 0x8e, 0xc9, 0xd9, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0xaa, 0x5c,
	0xec, 0xc1, 0xa9, 0x79, 0x29, 0x8e, 0xc9, 0xd9, 0x42, 0xdc, 0x7a, 0x20, 0x1b, 0x20, 0x66, 0x4a,
	0x21, 0x71, 0x8a, 0x95, 0x18, 0x9c, 0xd8, 0xa3, 0x58, 0xc1, 0x8e, 0x48, 0x62, 0x03, 0xbb, 0xc0,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x78, 0x10, 0x60, 0xb2, 0x94, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AckServiceClient is the client API for AckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AckServiceClient interface {
	SendAck(ctx context.Context, in *AckReq, opts ...grpc.CallOption) (*AckRes, error)
}

type ackServiceClient struct {
	cc *grpc.ClientConn
}

func NewAckServiceClient(cc *grpc.ClientConn) AckServiceClient {
	return &ackServiceClient{cc}
}

func (c *ackServiceClient) SendAck(ctx context.Context, in *AckReq, opts ...grpc.CallOption) (*AckRes, error) {
	out := new(AckRes)
	err := c.cc.Invoke(ctx, "/ack.AckService/SendAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AckServiceServer is the server API for AckService service.
type AckServiceServer interface {
	SendAck(context.Context, *AckReq) (*AckRes, error)
}

// UnimplementedAckServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAckServiceServer struct {
}

func (*UnimplementedAckServiceServer) SendAck(ctx context.Context, req *AckReq) (*AckRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAck not implemented")
}

func RegisterAckServiceServer(s *grpc.Server, srv AckServiceServer) {
	s.RegisterService(&_AckService_serviceDesc, srv)
}

func _AckService_SendAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AckServiceServer).SendAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ack.AckService/SendAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AckServiceServer).SendAck(ctx, req.(*AckReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AckService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ack.AckService",
	HandlerType: (*AckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAck",
			Handler:    _AckService_SendAck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ackpb/ack.proto",
}
